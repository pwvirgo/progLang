#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 78 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 947 0 25 29 1 #"\n"
0 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 25 3 3 #")) "
0 0 17 3 39 #";; so we can put tests in a second file"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"#| 1. function sequence takes 3 arguments low, high, and stride, all"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"assumed to be numbers. Assumes stride is positive.  Produces a list "
 #"of"
) 0 0 17 29 1 #"\n"
0 0 17 3 31 #"numbers from low to high (inclu"
0 0 17 3 40 #"ding low and possibly high) separated by"
0 0 17 29 1 #"\n"
0 0 17 3 30 #"stride and in sorted order. |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 15 3 8 #"sequence"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 14 3 4 #"high"
0 0 25 3 1 #" "
0 0 14 3 6 #"stride"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #">"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 14 3 4 #"high"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"        "
0 0 22 3 1 #"'"
0 0 25 3 2 #"()"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 2 #" ("
0 0 15 3 8 #"sequence"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"low"
0 0 25 3 1 #" "
0 0 14 3 6 #"stride"
0 0 25 3 2 #") "
0 0 14 3 4 #"high"
0 0 25 3 1 #" "
0 0 14 3 6 #"stride"
0 0 25 3 5 #" ))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #"#| 2. function string-append-map takes a list of strin"
0 0 17 3 18 #"gs xs and a string"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"suffix and returns a list of strings. Each element of the output sho"
 #"uld"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"be the corresponding element of the input appended with suffix (with"
 #" no"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"extra space between the element and suffix). You must use Racket-lib"
 #"rary"
) 0 0 17 29 1 #"\n"
0 0 17 3 61
#"functions map and string-append. Sample solution: 2 lines. |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"string-append-map"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 6 #"suffix"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 6 #"suffix"
0 0 25 3 3 #")) "
0 0 14 3 2 #"xs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"#| 3. function list-nth-mod takes a list xs and a number n. If the"
0 0 17 29 1 #"\n"
0 0 17 3 58
#"number is negative, terminates the computation with (error"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"\"list-nth-mod: negative number\"). Else if the list is empty, termi"
 #"nate"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"the computation with (error \"list-nth-mod: empty list\"). Else retu"
 #"rn the"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"ith element of the list where we count from zero and i is the remain"
 #"der"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"produced when dividing n by the li"
0 0 17 3 40 #"st\342\200\231s length. Library functions length,"
0 0 17 29 1 #"\n"
0 0 17 3 63
(
 #"remainder, car, and list-tail are all useful \342\200\223 see the Ra"
 #"cket"
) 0 0 17 29 1 #"\n"
0 0 17 3 45 #"documentation. Sample solution is 6 lines. |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"list-nth-mod"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 8 #")      ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 31 #"\"list-nth-mod: negative number\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 4 #")  ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 19 3 26 #"\"list-nth-mod: empty list\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 22 3 2 #"#t"
0 0 25 3 12 #"           ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 9 #"list-tail"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 7 #"))))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"#| 4. function stream-for-n-steps takes a stream s and a number n. I"
 #"t"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"returns a list holding the first n values produced by s in order. As"
 #"sume"
) 0 0 17 29 1 #"\n"
0 0 17 3 68
#"n is non-negative. Sample solution: 5 lines. Note: You can test your"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"streams with this function instead of the graphics code. |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 18 #"stream-for-n-steps"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 4 #"null"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 4 #"next"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 4 #")]) "
0 0 17 3 51 #"; (s) will be used 2 times - so grab eval once here"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 14 3 18 #"stream-for-n-steps"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 4 #"next"
0 0 25 3 3 #") ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 17 3 55 #"#| 5. funny-number-stream is like the stream of natural"
0 0 17 29 1 #"\n"
0 0 17 3 69
(
 #"numbers (i.e., 1, 2, 3, ...) except numbers divisble by 5 are negate"
 #"d"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"(i.e., 1, 2, 3, 4, -5, 6, 7, 8, 9, -10, 11, ...). Remember a stream "
 #"is a"
) 0 0 17 29 1 #"\n"
0 0 17 3 58
#"thunk that when called produces a pair. Here the car of th"
0 0 17 3 14 #"e pair will be"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"a number and the cdr will be another stream. |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 19 #"funny-number-stream"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #") "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  (("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";(stream-for-n-steps funny-number-stream 16)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#"#| 6. dan-then-dog: the elements of the stream alternate between the"
0 0 17 29 1 #"\n"
0 0 17 3 63
(
 #"strings \"dan.jpg\" and \"dog.jpg\" (starting with \"dan.jpg\"). Mor"
 #"e"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"specifically, dan-then-dog should be a thunk that when called produc"
 #"es a"
) 0 0 17 29 1 #"\n"
0 0 17 3 65
#"pair of \"dan.jpg\" and a thunk that when called produces a pair of"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"\"dog.jpg\" and a thunk that when called... etc. |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"dan-then-dog"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 3 #"jpg"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 14 3 3 #"jpg"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 25 3 1 #" "
0 0 14 3 3 #"jpg"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"dan.jpg\""
0 0 25 3 2 #") "
0 0 19 3 9 #"\"dog.jpg\""
0 0 25 3 1 #" "
0 0 19 3 9 #"\"dan.jpg\""
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"  (("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"dan.jpg\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 36 #";(stream-for-n-steps dan-then-dog 5)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 66
#"#| ---------------------------------------------------------------"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"7. stream-add-zero takes a stream s and returns another stream. If s"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"would produce v for its ith element, then (stream-add-zero s) would"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"produce the pair (0 . v) for its ith element."
0 0 17 29 1 #"\n"
0 0 17 3 67
#" ----------------------------------------------------------------|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"stream-add-zero"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 9         709 22           0 0           0 117 0 25 3 1 #" "
0 0 14 3 4 #"This"
0 0 25 3 1 #" "
0 0 14 3 4 #"does"
0 0 25 3 1 #" "
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 4 #"work"
0 0 25 3 1 #" "
0 0 14 3 3 #"and"
0 0 25 3 1 #" "
0 0 14 3 1 #"I"
0 0 25 3 1 #" "
0 0 15 3 2 #"do"
0 0 25 3 1 #" "
0 0 14 3 3 #"not"
0 0 25 3 1 #" "
0 0 14 3 10 #"understand"
0 0 25 3 1 #" "
0 0 14 3 4 #"why!"
0 0 25 3 2 #"  "
0 0 14 3 2 #"It"
0 0 25 3 1 #" "
0 0 14 3 7 #"returns"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 29 1 #"\n"
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 6 #"stream"
0 0 25 3 1 #" "
0 0 14 3 2 #"is"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 5 #"pair."
0 0 25 3 2 #"  "
0 0 14 3 3 #"The"
0 0 25 3 1 #" "
0 0 14 3 7 #"example"
0 0 25 3 1 #" "
0 0 14 3 5 #"above"
0 0 25 3 1 #" "
0 0 14 3 4 #"does"
0 0 25 3 1 #" "
0 0 14 3 4 #"work"
0 0 25 3 1 #" "
0 0 14 3 3 #"but"
0 0 25 3 1 #" "
0 0 14 3 2 #"it"
0 0 25 3 1 #" "
0 0 14 3 7 #"returns"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 29 1 #"\n"
0 0 14 3 8 #"function"
0 0 25 3 1 #" "
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 6 #"unlike"
0 0 25 3 1 #" "
0 0 14 3 12 #"dan-then-dog"
0 0 25 3 1 #" "
0 0 14 3 2 #"or"
0 0 25 3 1 #" "
0 0 14 3 3 #"any"
0 0 25 3 1 #" "
0 0 14 3 5 #"other"
0 0 25 3 1 #" "
0 0 14 3 8 #"streams."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"stream-add-zero2"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #")))"
0           0 0 0 25 29 1 #"\n"
0 0 17 3 62
#"; (stream-for-n-steps (stream-add-zero funny-number-stream) 5)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 28 #"#| -------------------------"
0 0 17 3 44 #"--------------------------------------------"
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"8. cycle-lists takes two lists xs and ys and returns a stream. The l"
 #"ists"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"may or may not be the same length, but assume they are both non-empt"
 #"y."
) 0 0 17 29 1 #"\n"
0 0 17 3 67
#"The elements produced by the stream are pairs where the first part "
0 0 17 3 2 #"is"
0 0 17 29 1 #"\n"
0 0 17 3 65
#"from xs and the second part is from ys. The stream cycles forever"
0 0 17 29 1 #"\n"
0 0 17 3 75
(
 #"through the lists. For example, if xs is \342\200\231(1 2 3) and ys "
 #"is \342\200\231(\"a\" \"b\"),"
) 0 0 17 29 1 #"\n"
0 0 17 3 68
(
 #"then the stream would produce, (1 . \"a\"), (2 . \"b\"), (3 . \"a\")"
 #", (1 ."
) 0 0 17 29 1 #"\n"
0 0 17 3 54
#"\"b\"), (2 . \"a\"), (3 . \"b\"), (1 . \"a\"), (2 . \"b\"), etc."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"Sample solution is 6 lines and is more complicated than the previous"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"stream problems. Hints: Use one of the functions you wrote earlier. "
 #"Use"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"a recursive helper function that takes a number n and calls itself w"
 #"ith"
) 0 0 17 29 1 #"\n"
0 0 17 3 23 #"(+ n 1) inside a thunk."
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"   -----------------------------------------------------------------"
 #"- |#"
) 0 0 25 29 1 #"\n"
0 9         361 22           0 0           0 59 0 14 3 5 #"fails"
0 0 25 3 2 #" ("
0 0 14 3 8 #"expected"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 4 #"pair"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cycle-lists"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 2 #"ys"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 3 #") ("
0 0 14 3 1 #"f"
0 0 25 3 3 #" (("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 5 #")) (("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 12 #"dan-then-dog"
0 0 25 3 1 #" "
0 0 14 3 19 #"funny-number-stream"
0 0 25 3 3 #")))"
0           0 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"cycle-lists"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 2 #"ys"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 62
#"; function next continually recycles a list to create a stream"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs2"
0 0 25 3 3 #") ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs2"
0 0 25 3 3 #")) "
0 0 14 3 2 #"xs"
0 0 25 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 3 #"xs2"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    (("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 70
(
 #"; function mix creates a single stream by interleaving 2 input strea"
 #"ms"
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"mix"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 25 3 5 #" () ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 3 #") ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 4 #")) ("
0 0 14 3 3 #"mix"
0 0 25 3 3 #" (("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 5 #")) (("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"mix"
0 0 25 3 2 #" ("
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #") ("
0 0 14 3 4 #"next"
0 0 25 3 1 #" "
0 0 14 3 2 #"ys"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #"#| 9. vector-assoc takes a value v and a vector vec. It should behav"
 #"e"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"like Racket\342\200\231s assoc library function except (1) it proces"
 #"ses a vector"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"(Racket\342\200\231s name for an array) instead of a list, (2) it al"
 #"lows vector"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"elements not to be pairs in which case it skips them, and (3) it alw"
 #"ays"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"takes exactly two arguments. Proce"
0 0 17 3 31 #"ss the vector elements in order"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"starting from 0. You must use library functions vector-length,"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"vector-ref, and equal?. Return #f if no vector element is a pair wit"
 #"h a"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
#"car field equal to v, else return the first pair with an equal car"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"field. Sample solution is 9 lines, using one local recursive helper"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"function. |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector-assoc"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 25 3 3 #" (["
0 0 14 3 3 #"len"
0 0 25 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 3 #"ndx"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 3 #"ndx"
0 0 25 3 1 #" "
0 0 14 3 3 #"len"
0 0 25 3 2 #") "
0 0 22 3 2 #"#f"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"ndx"
0 0 25 3 3 #" ))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"ndx"
0 0 25 3 5 #")))) "
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 14 3 10 #"vector-ref"
0 0 25 3 1 #" "
0 0 14 3 3 #"vec"
0 0 25 3 1 #" "
0 0 14 3 3 #"ndx"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ["
0 0 22 3 2 #"#t"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 14 3 3 #"ndx"
0 0 25 3 7 #"))]))])"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"vector-assoc"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 2 #" ("
0 0 17 3 6 #"vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 2 #") "
0 0 17 3 1 #"'"
0 0 17 3 7 #"(3 4)))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 64
#"#| 10. cached-assoc takes a list xs and a number n and returns a"
0 0 17 29 1 #"\n"
0 0 17 3 66
#"function that takes one argument v and returns the same thing that"
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"(assoc v xs) would return. However, you should use an n-element cach"
 #"e of"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"recent results to possibly make this function faster than just calli"
 #"ng"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"assoc (if xs is long and a few elements are returned often). The cac"
 #"he"
) 0 0 17 29 1 #"\n"
0 0 17 3 66
#"must be a Racket vector of length n that is created by the call to"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"cached"
0 0 17 3 62
#"-assoc (use Racket library function vector or make-vector) and"
0 0 17 29 1 #"\n"
0 0 17 3 60
#"used-and-possibly-mutated each time the function returned by"
0 0 17 29 1 #"\n"
0 0 17 3 69
(
 #"cached-assoc is called. Assume n is positive.  The cache starts empt"
 #"y"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"(all elements #f). When the function returned by cached-assoc is cal"
 #"led,"
) 0 0 17 29 1 #"\n"
0 0 17 3 69
(
 #"it first checks the cache for the answer. If it is not there, it use"
 #"s"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"assoc and xs to get the answer and if the result is not #f (i.e., xs"
 #" has"
) 0 0 17 29 1 #"\n"
0 0 17 3 11 #"a pair that"
0 0 17 3 57 #" matches), it adds the pair to the cache before returning"
0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"(using vector-set!). The cache slots are used in a round-robin fashi"
 #"on:"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"the first time a pair is added to the cache it is put in position 0,"
 #" the"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"next pair is put in position 1, etc. up to position n - 1 and then b"
 #"ack"
) 0 0 17 29 1 #"\n"
0 0 17 3 71
(
 #"to position 0 (replacing the pair already there), then position 1, e"
 #"tc."
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 6 #"Hints:"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 66
(
 #"\342\200\242 In addition to a variable for holding the vector whose "
 #"content"
) 0 0 17 3 5 #"s you"
0 0 17 29 1 #"\n"
0 0 17 3 69
(
 #"mutate with vector-set!, use a second variable to keep track of whic"
 #"h"
) 0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"cache slot will be replaced next. After modifying the cache, increme"
 #"nt"
) 0 0 17 29 1 #"\n"
0 0 17 3 46 #"this variable (with set!) or set it back to 0."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"\342\200\242 To test your cache, it can be useful to add print expre"
 #"ssions so you"
) 0 0 17 29 1 #"\n"
0 0 17 3 72
(
 #"know when you are using the cache and when you are not. But remove t"
 #"hese"
) 0 0 17 29 1 #"\n"
0 0 17 3 46 #"print expressions before submitting your code."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"\342\200\242 Sample solution is 15 lines. |#"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"cached-assoc"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 4 #"cash"
0 0 25 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 1 #"h"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 1 #"("
0 0 14 3 1 #"v"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"z"
0 0 25 3 2 #" ("
0 0 14 3 12 #"vector-assoc"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #" "
0 0 14 3 4 #"cash"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 17 3 2 #";("
0 0 17 3 7 #"writeln"
0 0 17 3 6 #" cash)"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"z"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 25 3 1 #" "
0 0 14 3 1 #"v"
0 0 25 3 1 #" "
0 0 14 3 2 #"xs"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 2 #"#f"
0 0 25 3 4 #")   "
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                        "
0 0 22 3 2 #"#f"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 11 #"vector-set!"
0 0 25 3 1 #" "
0 0 14 3 4 #"cash"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 33 #"                                ("
0 0 14 3 4 #"set!"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 3 #"pos"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 28 #"                            "
0 0 14 3 1 #"x"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"                "
0 0 14 3 1 #"z"
0 0 25 3 5 #")))])"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"       "
0 0 14 3 1 #"h"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 1 #"q"
0 0 17 3 2 #" ("
0 0 17 3 12 #"cached-assoc"
0 0 17 3 2 #" ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"6"
0 0 17 3 3 #")) "
0 0 17 3 3 #"2))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 1 #"q"
0 0 17 3 1 #" "
0 0 17 3 2 #"3)"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 25 29 1 #"\n"
0           0
